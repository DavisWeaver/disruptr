View(v)
out <-
foreach::foreach(j = iterators::iter(df_list), v = iterators::iter(v_list),
.packages = "disruptr") %dopar% {
v
cell_line_df <-
foreach::foreach(i = 1:n, .combine = "rbind", .packages = "disruptr") %do%
{
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i)
dnp_ij$i = i
return(dnp_ij)
}
}
View(v_list)
View(v_list)
df_v <- dplyr::bind_rows(df_list)
View(df_v)
df_v <- dplyr::bind_rows(v_list)
?tidyr::pivot_wider
df_v %>% dplyr::group_by(.data$sample_name) %>%
dplyr::slice_max(order_by = .data$dnp, n = n_genes) %>%
dplyr::select(.data$gene_name, .data$sample_name) %>%
tidyr::pivot_wider(names_from = .data$sample_name,
values_from = .data$gene_name)
df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::slice_max(order_by = .data$dnp, n = n_genes) %>%
dplyr::select(.data$gene_name, .data$sample_name) %>%
tidyr::pivot_wider(names_from = .data$sample_name,
values_from = .data$gene_name)
View(df_list)
View(df)
df <- compute_dnp(cache = "G:/My Drive/data/mir_paper/", df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = 6)
View(df)
df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::slice_max(order_by = .data$dnp, n = n_genes) %>%
dplyr::select(.data$gene_name, .data$sample_name) %>%
tidyr::pivot_wider(names_from = .data$sample_name,
values_from = .data$gene_name)
test <- df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::slice_max(order_by = .data$dnp, n = n_genes) %>%
dplyr::select(.data$gene_name, .data$sample_name) %>%
tidyr::pivot_wider(names_from = .data$sample_name,
values_from = .data$gene_name)
View(test)
test$X11_TC252_DMSO
test$X49_TC32_DMSO
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
v_df
devtools::load_all()
View(v_df)
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
View(v_df)
View(df_list)
j <- df_list[[1]]
j_sample <- j$sample_name[1]
v <- v_df[,j_sample]
View(v)
v <- v_df[,j_sample][[1]]
View(v)
v <- v_df[,j_sample][[1]]
v <- v_df[,j_sample][[1]][[1]]
?calc_dnp_i
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top 50 genes for a given sample
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j)
library(devtools)
install()
install()
library(devtools)
install()
library(devtools)
load_all()
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df,
mir_paper = TRUE, ncores = 6, experiment_name = "EWS_NP")
df <- compute_dnp(cache = "G:/My Drive/data/mir_paper/", df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = 6)
cache= "G:/My Drive/data/mir_paper"
df = df
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 1
n_genes = 50
n = 10
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#just return the file if we've already done this
if(file.exists(paste0(cache, experiment_name, "dnpNull.Rda"))) {
load(paste0(cache, experiment_name, "dnpNull.Rda"))
return(df_np)
}
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
samples <- unique(df$sample_name)
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
load_all()
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
load_all()
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
View(v_df)
#get rid of dnp
df <- df %>% dplyr::select(-dnp)
#do we want to do a grouped split on sample and then iterate directly through the list? probably
df_list <- df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::group_split()
j <- df_list[[1]]
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top 50 genes for a given sample
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j)
View(dnp_ij)
length(!is.na(dnp_ij$dnp))
df <- j
b_rm = v_j
v_rm = v_j
exp <- df$expression
names(exp) <- unlist(df[,1])
View(df)
if(is.null(v_rm)) {
v_rm = names(exp)
}
dnp_mat <- node_repression(g = g, v_rm = v_rm, exp= exp)
View(dnp_mat)
#sum everything
dnp <- Matrix::colSums(dnp_mat)
dnp
#add to dataframe and then join with df
dnp_df <- data.frame(gene_name = names(dnp), dnp = dnp)
dnp_df
df <- dplyr::left_join(df, dnp_df)
View(df)
length(!is.na(df$dnp))
table(df$dnp)
sum(is.na(df$dnp))
sum(!is.na(df$dnp))
df <- dplyr::mutate(df, ifelse(is.na(.data$dnp), 0, .data$dnp))
View(df)
df <- dplyr::mutate(df, dnp = ifelse(is.na(.data$dnp), 0, .data$dnp))
table(df$dnp)
#scramble the graph
g_i <- get_random_graph(g)
devtools::install()
devtools::load_all()
library(magrittr)
library(foreach)
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df,
mir_paper = TRUE, ncores = 6, experiment_name = "EWS_NP")
df <- compute_dnp(cache = "G:/My Drive/data/mir_paper/", df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = 6)
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 1
n_genes = 50
n = 10
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#just return the file if we've already done this
if(file.exists(paste0(cache, experiment_name, "dnpNull.Rda"))) {
load(paste0(cache, experiment_name, "dnpNull.Rda"))
return(df_np)
}
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
samples <- unique(df$sample_name)
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
#get rid of dnp
df <- df %>% dplyr::select(-dnp)
#do we want to do a grouped split on sample and then iterate directly through the list? probably
df_list <- df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::group_split()
j <- df_list[[1]]
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top 50 genes for a given sample
cell_line_df <-
foreach::foreach(i = 1:n, .combine = "rbind", .packages = "disruptr") %do%
{
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j)
dnp_ij$i = i
return(dnp_ij)
}
View(cell_line_df)
devtools::install()
devtools::load_all()
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df,
mir_paper = TRUE, ncores = 6, experiment_name = "EWS_NP")
df <- compute_dnp(cache = "G:/My Drive/data/mir_paper/", df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = 6)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 1
n_genes = 50
n = 10
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#just return the file if we've already done this
if(file.exists(paste0(cache, experiment_name, "dnpNull.Rda"))) {
load(paste0(cache, experiment_name, "dnpNull.Rda"))
return(df_np)
}
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
samples <- unique(df$sample_name)
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
#get rid of dnp
df <- df %>% dplyr::select(-dnp)
#do we want to do a grouped split on sample and then iterate directly through the list? probably
df_list <- df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::group_split()
j <- df_list[[1]]
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top 50 genes for a given sample
cell_line_df <-
foreach::foreach(i = 1:n, .combine = "rbind", .packages = "disruptr") %do%
{
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j)
dnp_ij$i = i
return(dnp_ij)
}
library(foreach)
cell_line_df <-
foreach::foreach(i = 1:n, .combine = "rbind", .packages = "disruptr") %do%
{
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j)
dnp_ij$i = i
return(dnp_ij)
}
View(dnp_ij)
?calc_dnp_ij
?calc_dnp_i
document()
devtools::document()
?calc_dnp_i
cell_line_df <-
foreach::foreach(i = 1:n, .combine = "rbind", .packages = "disruptr") %do%
{
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j, keep_all = FALSE)
dnp_ij$i = i
return(dnp_ij)
}
devtools::install()
library(devtools)
load_all()
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 1
n_genes = 50
n = 10
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df,
mir_paper = TRUE, ncores = 6, experiment_name = "EWS_NP")
df <- compute_dnp(cache = "G:/My Drive/data/mir_paper/", df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = 6)
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#just return the file if we've already done this
if(file.exists(paste0(cache, experiment_name, "dnpNull.Rda"))) {
load(paste0(cache, experiment_name, "dnpNull.Rda"))
return(df_np)
}
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
samples <- unique(df$sample_name)
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
#get rid of dnp
df <- df %>% dplyr::select(-dnp)
#do we want to do a grouped split on sample and then iterate directly through the list? probably
df_list <- df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::group_split()
j <- df_list[[1]]
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top 50 genes for a given sample
cell_line_df <-
foreach::foreach(i = 1:n, .combine = "rbind", .packages = "disruptr") %do%
{
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j, keep_all = FALSE)
dnp_ij$i = i
return(dnp_ij)
}
View(cell_line_df)
n = 2
ncores = 4
out <-
foreach::foreach(j = iterators::iter(df_list),
.packages = "disruptr") %dopar%
{
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top 50 genes for a given sample
cell_line_df <-
foreach::foreach(i = 1:n, .combine = "rbind", .packages = "disruptr") %do%
{
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j, keep_all = FALSE)
dnp_ij$i = i
return(dnp_ij)
}
}
View(out)
View(cell_line_df)
View(cell_line_df)
null_df <- cell_line_df %>%
dplyr::group_by(gene_name, sample_name) %>%
dplyr::summarise(mean_dnp = mean(.data$np),
sd_dnp = sd(.data$dnp),
n = dplyr::n())
View(df)
View(null_df)
document()
?compute_null
install()
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 4
n_genes = 20
n = 4
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df,
mir_paper = TRUE, ncores = 6, experiment_name = "EWS_NP")
df <- compute_dnp(cache = "G:/My Drive/data/mir_paper/", df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = 6)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = n_cores,
n_genes = n_genes, n = n)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df_null)
document()
devtools::document()
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 20
n_genes = 50
n = 1000
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#just return the file if we've already done this
if(file.exists(paste0(cache, experiment_name, "np.Rda"))) {
load(paste0(cache, experiment_name, "np.Rda"))
return(df_np)
}
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
devtools::load_all()
exp_mat <- df
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
View(df)
View(exp_mat)
exp_mat <- df
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
View(df)
is.character(unlist(df[,1]))
##label the first column as gene name
if(is.character(unlist(df[,1]))) {
colnames(df)[1] <- "gene_name"
} else if(is.character(rownames(df))) {
df$gene_name <- rownames(df)
}
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 6
n_genes = 2
n = 2
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df,
mir_paper = TRUE, ncores = 6, experiment_name = "EWS_NP")
df <- compute_dnp(cache = "G:/My Drive/data/mir_paper/", df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = 6)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
load(paste0(cache, experiment_name, "dnpNull.Rda"))
View(null_df)
load("C:/Users/dtw43/Documents/miRNA_Targeting/data_files/EWS_NPdnp.Rda")
View(df_dnp)
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#just return the file if we've already done this
if(file.exists(paste0(cache, experiment_name, "dnpNull.Rda"))) {
load(paste0(cache, experiment_name, "dnpNull.Rda"))
return(null_df)
}
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
samples <- unique(df$sample_name)
devtools::load_all()
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
samples <- unique(df$sample_name)
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
View(v_df)
#get rid of dnp
df <- df %>% dplyr::select(-dnp)
#do we want to do a grouped split on sample and then iterate directly through the list? probably
df_list <- df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::group_split()
j <- df_list[[1]]
j$sample_name[1]
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top 50 genes for a given sample
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 12
n_genes = 50
n = 1000
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
devtools::load_all()
document()
devtools::document9
devtools::document()
6/766500 * 3.6e12
6/766500 * 3.6e6
6/1936800 * 3.6e6
