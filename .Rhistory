n_genes = 4
n = 4
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df_null)
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 4
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df_null)
?rnorm
#for testing only
load(system.file("test_data/toy_combine.Rda", package = "disruptr"))
View(df)
?rnowm
?rnorm
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 4
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df_null)
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 4
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df_null)
?sd
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df_null)
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df)
View(df)
View(df_null)
devtools::install()
devtools::install()
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
?lapply(list(...))
sd(2)
sd(2,3)
sd(c(2,3))
sd(c(2))
sd(c(2,2))
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
warnings()
View(df_null)
?foreach::foreach
10 %% 10
20 %%10
15 %%10
1 %%10
devtools::install()
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
devtools::install()
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
devtools::::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#just return the file if we've already done this
if(file.exists(paste0(cache, experiment_name, "dnpNull.Rda"))) {
load(paste0(cache, experiment_name, "dnpNull.Rda"))
return(null_df)
}
#load ppi
g <- load_ppi(cache = cache, min_score = min_score, ppi = ppi)
samples <- unique(df$sample_name)
#grab top n genes per sample to iterate over
v_df = get_topn(df =df, n_genes = n_genes)
#get rid of dnp
df <- df %>% dplyr::select(-.data$dnp)
#do we want to do a grouped split on sample and then iterate directly through the list? probably
df_list <- df %>% dplyr::group_by(.data$sample_name) %>%
dplyr::group_split()
j <- df_list[[1]]
mem_df <- list()
agg_df <- list()
for(i in 1:n) {
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top n genes for a given sample
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
#dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j, keep_all = FALSE)
#for testing only
dnp_ij <- dplyr::filter(j, .data$gene_name %in% v_j)
dnp_ij$dnp <- rnorm(nrow(dnp_ij), mean = 50, sd = 20)
mem_df <- c(mem_df, dnp_ij)
if(i %% 5 == 0) {
agg_df[[j]] <- combine_null(mem_df)
mem_df <- list() #clear "mememory
}
}
mem_df <- list()
agg_df <- list()
z <- 1
for(i in 1:n) {
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top n genes for a given sample
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
#dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j, keep_all = FALSE)
#for testing only
dnp_ij <- dplyr::filter(j, .data$gene_name %in% v_j)
dnp_ij$dnp <- rnorm(nrow(dnp_ij), mean = 50, sd = 20)
mem_df <- c(mem_df, dnp_ij)
if(i %% 5 == 0) {
agg_df[[z]] <- combine_null(mem_df)
mem_df <- list() #clear "mememory
z <- z + 1#progress ticker
}
}
View(mem_df)
mem_df <- list()
mem_df <- list()
agg_df <- list()
z <- 1
for(i in 1:n) {
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top n genes for a given sample
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
#dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j, keep_all = FALSE)
#for testing only
dnp_ij <- dplyr::filter(j, .data$gene_name %in% v_j)
dnp_ij$dnp <- rnorm(nrow(dnp_ij), mean = 50, sd = 20)
mem_df[[i]] <- dnp_ij
if(i %% 5 == 0) {
agg_df[[z]] <- combine_null(mem_df)
mem_df <- list() #clear "mememory
z <- z + 1#progress ticker
}
}
View(agg_df)
agg_df[[z]]$z <- z
z<- 4
agg_df[[z]]$z <- z
View(agg_df)
mem_df <- list()
agg_df <- list()
z <- 1
for(i in 1:n) {
#get the info on the top genes for a given sample
j_sample <- j$sample_name[1]
v_j <- v_df[,j_sample][[1]][[1]] #Indexing is gross but this just grabs the top n genes for a given sample
#scramble the graph
g_i <- get_random_graph(g)
#calc change in network potential
#dnp_ij <- calc_dnp_i(j, g_i, v_rm = v_j, keep_all = FALSE)
#for testing only
dnp_ij <- dplyr::filter(j, .data$gene_name %in% v_j)
dnp_ij$dnp <- rnorm(nrow(dnp_ij), mean = 50, sd = 20)
mem_df[[i]] <- dnp_ij
if(i %% 5 == 0) {
agg_df[[z]] <- combine_null(mem_df)
agg_df[[z]]$z <- z
mem_df <- list() #clear "mememory
z <- z + 1#progress ticker
}
}
View(agg_df)
View(agg_df)
x <- agg_df
View(agg_df)
x <- dplyr::bind_rows(x)
View(x)
df <- x %>%
dplyr::group_by(.data$gene_name, .data$sample_name) %>%
dplyr::summarise(mean_dnp = mean(.data$dnp),
sd_dnp = sd(.data$dnp, na.rm = TRUE),
n = sum(.data$n))
df <- x %>%
dplyr::group_by(.data$gene_name, .data$sample_name) %>%
dplyr::summarise(mean_dnp = mean(.data$mean_dnp),
sd_dnp = mean(.data$sd_dnp, na.rm = TRUE),
n = sum(.data$n))
View(df)
devtools::install()
library(disruptr)
##Define Globals
cache = "G:/My Drive/data/mir_paper/"
experiment_name = "EWS_NP"
ppi = "biogrid"
ncores = 2
n_genes = 4
n = 20
#Function to load and prep the St. Jude data for entry to our pipeline
#going to rename the columns to match the columns for our other data - this will create some confusing column names but I'll rename them back
#after it goes through the pipeline
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- compute_np(cache = cache, exp_mat = df,
mir_paper = TRUE, ncores = ncores, experiment_name = "EWS_NP")
df <- compute_dnp(cache = cache, df = df,
experiment_name = "EWS_NP", ppi = "biogrid",
ncores = ncores)
df_null <- compute_null(cache = cache, experiment_name = experiment_name,
df = df, ppi = ppi, ncores = ncores,
n_genes = n_genes, n = n)
View(df_null)
# download file, store in `Data` dir
curl::curl_download("ftp://ftp.sanger.ac.uk/pub/project/cancerrxgene/releases/current_release/GDSC2_fitted_dose_response_25Feb20.xlsx",
destfile = paste0(cache, "/gdsc_dr.xlsx"))
cache = "G:/My Druve/data/"
cache = "G:/My Drive/data/"
# download file, store in `Data` dir
curl::curl_download("ftp://ftp.sanger.ac.uk/pub/project/cancerrxgene/releases/current_release/GDSC2_fitted_dose_response_25Feb20.xlsx",
destfile = paste0(cache, "/gdsc_dr.xlsx"))
test = 1:10
names(1:10)
