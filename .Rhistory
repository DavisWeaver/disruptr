g <- igraph::subgraph(g, seed_proteins)
?igraph::induced_subgraph
g <- prep_stringdb(cache = "test_data", min_score = 200)
g <- igraph::induced_subgraph(g, seed_proteins)
toy_exp <- runif(n = length(igraph::V(g)), min = 0, max = 10)
names(toy_exp) <- seed_proteins
vertices <- as.character(names(igraph::V(g)))
names(toy_exp) <- seed_proteins
exp <- toy_exp
keep_vertices <- vertices[vertices %in% names(exp)]
g <- igraph::induced_subgraph(g, keep_vertices)
exp <- exp[names(exp) %in% keep_vertices]
load_all()
devtools::load_all()
#get a list of neighbors for each node
neighbors <-
lapply(1:length(vertices),
get_neighbors, g = g)
neighbors
names(neighborList) <- genesInBoth
names(neighborList) <- vertices
names(neighbors) <- vertices
View(neighbors)
i <- 1
c_j <- sum(exp[neighbors[[vertices[i]]]])
c_i <- exp[vertices[i]]
#loop over all vertices
np_matrix <- matrix(nrow = length(vertices), ncol = 2)
g_i <- calc_np(c_i = c_i, c_j = c_j)
g_i
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec[i] <- calc_np(c_i = c_i, c_j = c_j)
}
np_vec
?vector
#loop over all vertices
np_vec <- vector(mode = "name", length = length(vertices))
#loop over all vertices
np_vec <- vector(mode = "any", length = length(vertices))
#loop over all vertices
np_vec <- vector(mode = "list", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec[i] <- calc_np(c_i = c_i, c_j = c_j)
}
View(np_vec)
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec <- calc_np(c_i = c_i, c_j = c_j)
}
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec[i] <- calc_np(c_i = c_i, c_j = c_j)
}
names(np_vec) <- vertices #rename the output vector
np_vec
library(devtools)
load_all()
library(crosstalkr)
library(magrittr)
library(dplyr)
#Lets use one of the hallmarks datasets or something
h_gene_sets <- msigdbr::msigdbr(species = "Homo sapiens", category = "H")
seed_proteins <- h_gene_sets %>% filter(gs_name == "HALLMARK_ANGIOGENESIS") %>%
select(gene_symbol) %>% unlist() %>%
sample(size = 25)
g <- prep_stringdb(cache = "test_data", min_score = 200)
g <- igraph::induced_subgraph(g, seed_proteins)
toy_exp <- runif(n = length(igraph::V(g)), min = 0, max = 10)
names(toy_exp) <- seed_proteins
v = seed_proteins[2]
v==1
g_new <- igraph::delete_vertices(g = g, v = v)
igraph::gsize(g_new)
igraph::gsize(g)
state_function = calc_np_all
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, exp = toy_exp)
s_old
s_new
plot(g)
get_neighbors(v, g)
s_old - s_new
s_old <- s_old[names(s_old) %in% names(s_new)]
s+old.packages()
s_old
s_old - s_new
plot(g_new)
get_neighbors("LPL", g)
install.packages("pzfx")
df <- pzfx::read_pzfx("B:/Mina/PC9_evo_11drugs/021621 CTG v ABwash v AB/11 drug assay all conditions.pzfx")
View(df)
devtools::install()
exp_df <- readr::read_csv2("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip")
exp_df <- readr::read_csv("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip")
exp_df <- readr::read_tsv("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip")
exp_df <- readr::read_tsv(unzip("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip"))
cache = "G:/My Drive/data/gdsc"
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip",
destfile = cache)
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip",
destfile = paste0(cache, "gdsc_exp.zip"))
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip",
destfile = paste0(cache, "/gdsc_exp.zip"))
unzip(paste0(cache, "/gdsc_exp.zip"))
?unzip
unzip(paste0(cache, "/gdsc_exp.zip", exdir = cache))
unzip(paste0(cache, "/gdsc_exp.zip", exdir = paste0(cache, "/"))
)
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip",
destfile = paste0(cache, "/gdsc_exp.zip"))
unzip(zipfile = paste0(cache, "/gdsc_exp.zip", exdir = cache))
unzip(zipfile = paste0(cache, "/gdsc_exp.zip"), exdir = paste0(cache, "/"))
unzip(zipfile = paste0(cache, "/gdsc_exp.zip"), exdir = cache)
?file.remove
file.remove(paste0(cache, "/gdsc_exp.zip")) #remove the zombie zip file
exp_df <- readr::read_tsv(paste0(cache, "/Cell_line_RMA_proc_basalExp.txt"))
View(exp_df)
View(exp_df)
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np_old <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np_old) <- seeds
v_check <- seeds[5]
g <- igraph::induced_subgraph(g, seeds)
seeds
v_rm = seeds[1:3]
state_function = calc_np_all
devtools::load_all()
install.packages("here")
install.packages("here")
devtools::load_all()
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np_old <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np_old) <- seeds
v_check <- seeds[5]
g <- igraph::induced_subgraph(g, seeds)
neihbor_only = TRUE
neighbors_only = TRUE
df <- data.frame(ncol = length(v_rm))
View(df)
data.frame
?data.frame
df <- matrix(ncol = length(v_rm))
View(df)
df <- matrix(ncol = length(v_rm), nrow = length(igraph::V(g)))
View(df)
out_mat <- matrix(ncol = length(v_rm), nrow = length(igraph::V(g)))
for(v in v_rm) {
#define v to be either all nodes or neighbors of v_rm
if(neighbors_only == TRUE) {
v <- get_neighbors(v, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
} else {
v = as.character(names(igraph::V(g)))
}
g_new <- igraph::delete_vertices(g = g, v = v, exp = toy_exp)
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
s_old <- s_old[names(s_new)]
#populate output matrix
out_mat[, i] <-  s_new - s_old
colnames(out_mat)[i] <- v
rownames(out_mat) <- names(s_old)
}
for(v in v_rm) {
#define v to be either all nodes or neighbors of v_rm
if(neighbors_only == TRUE) {
v <- get_neighbors(v, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
} else {
v = as.character(names(igraph::V(g)))
}
g_new <- igraph::delete_vertices(g = g, v = v)
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
s_old <- s_old[names(s_new)]
#populate output matrix
out_mat[, i] <-  s_new - s_old
colnames(out_mat)[i] <- v
rownames(out_mat) <- names(s_old)
}
state_function <- calc_np_all
for(v in v_rm) {
#define v to be either all nodes or neighbors of v_rm
if(neighbors_only == TRUE) {
v <- get_neighbors(v, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
} else {
v = as.character(names(igraph::V(g)))
}
g_new <- igraph::delete_vertices(g = g, v = v)
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
s_old <- s_old[names(s_new)]
#populate output matrix
out_mat[, i] <-  s_new - s_old
colnames(out_mat)[i] <- v
rownames(out_mat) <- names(s_old)
}
for(i in 1:length(v_rm)) {
#define v for a given iteration
v = v_rm[i]
#define v to be either all nodes or neighbors of v_rm
if(neighbors_only == TRUE) {
v <- get_neighbors(v, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
} else {
v = as.character(names(igraph::V(g)))
}
g_new <- igraph::delete_vertices(g = g, v = v)
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
s_old <- s_old[names(s_new)]
#populate output matrix
out_mat[, i] <-  s_new - s_old
colnames(out_mat)[i] <- v
rownames(out_mat) <- names(s_old)
}
View(out_mat)
i <- "ORL1"
i <- 1
#define v for a given iteration
v = v_rm[i]
#define v to be either all nodes or neighbors of v_rm
if(neighbors_only == TRUE) {
v <- get_neighbors(v, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
} else {
v = as.character(names(igraph::V(g)))
}
g_new <- igraph::delete_vertices(g = g, v = v)
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
s_new
plot(g)
out_mat <- matrix(ncol = length(v_rm), nrow = length(igraph::V(g)))
for(i in 1:length(v_rm)) {
#define v for a given iteration
v_rmi = v_rm[i]
#define v to be either all nodes or neighbors of v_rm
if(neighbors_only == TRUE) {
v <- get_neighbors(v, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
} else {
v = as.character(names(igraph::V(g)))
}
g_new <- igraph::delete_vertices(g = g, v = v_rmi)
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
s_old <- s_old[names(s_new)]
#populate output matrix
out_mat[, i] <-  s_new - s_old
colnames(out_mat)[i] <- v
}
plot(g_new)
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, v = v, exp = toy_exp)
library(devtools)
use_r("null_model")
use_test()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
load_all(
)
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
vertices
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
v = as.character(names(igraph::V(g)))
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
View(neighbors)
vertex_list <- igraph::V(g)
vertex_list
vertices
load_all()
load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
i <- 1
names(np_vec) <- v
vertex_list <- igraph::V(g) #slightly different than "vertices" - used for indexing
neighbors_named <- as.character(names(vertex_list[neighbors[[i]]])) #grab named vec of neighbors for each vertex
c_j <- sum(exp[neighbors_named]) #sum up the concentration of all neighbors
c_i <- exp[i]
c_i
c_j
devtools::load_all()
fcalc_np(c_i = c_i, c_j = c_j)
calc_np(c_i = c_i, c_j = c_j)
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
v = as.character(names(igraph::V(g)))
devtools::load_all()
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
neighbors
library(devtools)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
library(devtools)
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
load_all()
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
v = as.character(names(igraph::V(g)))
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
calc_np_all(exp = exp, g = g)
load_all()
load_all()
load_all()
library(devtools)
load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
v = as.character(names(igraph::V(g)))
exp = toy_exp
<- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
neighbors$OLR1
v
load_all()
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
v
i = 1
vertex_list <- igraph::V(g) #slightly different than "vertices" - used for indexing
neighbors_named <- as.character(names(vertex_list[neighbors[[i]]])) #grab named vec of neighbors for each vertex
neighbors_named
