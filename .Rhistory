#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
cache = "G:/My Drive/data/gdsc/"
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
Rcpp::compileAttributes()
calc_np_all2
fcalc_np_all
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
v = as.character(names(igraph::V(g)))
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
devtools::load_all()
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
devtools::load_all()
v = as.character(names(igraph::V(g)))
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
calc_np_all(exp = exp, g = g)
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
devtools::load_all()
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#re-order exp to have the same order as v
exp <- exp[v]
exp
v
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
devtools::load_all()
#run cpp function to do the actual calculation on each node
np_vec <- fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
np_vec
calc_np_all(exp = exp, g = g)
#run cpp function to do the actual calculation on each node
np_vec <- fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
devtools::load_all()
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
?microbenchmark::microbenchmark
Rcpp::compileAttributes()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(disruptr)
devtools::load_all()
library(disruptr)
devtools::load_all()
devtools::load_all()
devtools
library(devtools)
use_rcpp_armadillo()
?microbenchmark::microbenchmark
install()
install()
install()
install()
install()
library(disruptr)
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 6)
#calc np for that expression vector
install()
devtools::install()
install()
devtools::install()
"~/"
devtools::install()
devtools::install()
library(devtools)
use_r("pipeline")
use_test()
document()
install()
load(system.file("test_data/rld_Counts.csv", package = "disruptr"))
load(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
View(df)
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
library(devtools)
install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
View(df)
View(df)
##label the first column as gene name
if(is.character[df[,1]]) {
colnames(df)[1] <- "gene_name"
} else if(is.character(rownames(df))) {
df$gene_name <- rownames(df)
}
##label the first column as gene name
if(is.character(df[,1])) {
colnames(df)[1] <- "gene_name"
} else if(is.character(rownames(df))) {
df$gene_name <- rownames(df)
}
View(df)
?tidyr::pivot_longer
df <- df %>% tidyr::pivot_longer(-.data$gene_name,
names_to = "sample_name",
values_to = "expression")
library(magrittr)
df <- df %>% tidyr::pivot_longer(-.data$gene_name,
names_to = "sample_name",
values_to = "expression")
df <- df %>% dplyr::filter(.data$expression > 0)
load_all()
df <- experiment_breakout(df)
View(df)
document()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
?dplyr::slice_sample
df_small <- dplyr::slice_sample(prop = 0.02)
df_small <- dplyr::slice_sample(df, prop = 0.02)
View(df_small)
load_all()
?compute_np
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncore = 6)
load_all()
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncore = 6)
devtools::load_all()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncore = 6)
exp_mat = df_small
cache = "G:/My Drive/data/mir_paper/"
mir_paper = TRUE
ppi = "biogrid"
experiment_name = "EWS_cells"
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
View(df)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
#get list of cell lines to iterate over
samples <- unique(df$sample_name)
View(df)
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 6, experiment_name = "test")
devtools::load_all()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 6, experiment_name = "test")
devtools::load_all()
cache = "G:/My Drive/data/mir_paper"
experiment_name = "mir_paper"
ppi = "biogrid"
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
exp_mat = df_small
mir_paper = TRUE
ncores = 1
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
View(df)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
#get list of cell lines to iterate over
if(mir_paper == TRUE) {
samples <- unique(df$cell_line)
} else {
samples <- unique(df$sample_name)
}
i <- 1
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
}
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
#add np to df_i for that cell line
disruptr::calc_np_i(df_i, g = g)
df_i
df = df_i
#grab expression vector
exp <- df$log_expression
names(exp) <- df$gene_symbols
#calc np for that expression vector- use cpp internal version
np <- calc_np_all2(exp, g)
np
exp
names(exp)
names(exp) <- df[,1] #this will break if gene name is not the first column
#calc np for that expression vector- use cpp internal version
np <- calc_np_all2(exp, g)
np_df <- data.frame(gene_symbols = names(np),
np = np)
df <- dplyr::left_join(df, np_df)
devtools::load_all()
rm(list=ls(
))
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
install()
devtools::install()
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(test1)
ppi = "biogrid"
experiment_name = "test1"
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
cache = "G:/My Drive/data/mir_paper"
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
g
i <- 1
mir_paper =TRUE
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
library(magrittr)
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
View(df)
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
devtools::load_all()
exp_mat <- df_small
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
#get list of cell lines to iterate over
if(mir_paper == TRUE) {
samples <- unique(df$cell_line)
} else {
samples <- unique(df$sample_name)
}
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
#grab expression vector
exp <- df$log_expression
names(exp) <- df[,1] #this will break if gene name is not the first column
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
length(g)
gsize(g)
igraph::gsize(g)
View(df_i)
devtools::load_all()
#first add expression to the subgraph.
out_list <- add_expression(exp = exp, g = g)
g <- out_list[[2]]
exp <- out_list[[1]]
exp
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
#grab expression vector
exp <- df$log_expression
names(exp) <- df[,1] #this will break if gene name is not the first column
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
devtools::load_all()
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
igraph::gsize(g)
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
exp
View(df_i)
