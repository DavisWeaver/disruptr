names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
load_all(
)
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
vertices
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
v = as.character(names(igraph::V(g)))
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
View(neighbors)
vertex_list <- igraph::V(g)
vertex_list
vertices
load_all()
load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
i <- 1
names(np_vec) <- v
vertex_list <- igraph::V(g) #slightly different than "vertices" - used for indexing
neighbors_named <- as.character(names(vertex_list[neighbors[[i]]])) #grab named vec of neighbors for each vertex
c_j <- sum(exp[neighbors_named]) #sum up the concentration of all neighbors
c_i <- exp[i]
c_i
c_j
devtools::load_all()
fcalc_np(c_i = c_i, c_j = c_j)
calc_np(c_i = c_i, c_j = c_j)
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
v = as.character(names(igraph::V(g)))
devtools::load_all()
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
neighbors
library(devtools)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
library(devtools)
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
load_all()
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
v = as.character(names(igraph::V(g)))
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
calc_np_all(exp = exp, g = g)
load_all()
load_all()
load_all()
library(devtools)
load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
v = as.character(names(igraph::V(g)))
exp = toy_exp
<- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
neighbors$OLR1
v
load_all()
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
load_all()
load_all()
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
v
i = 1
vertex_list <- igraph::V(g) #slightly different than "vertices" - used for indexing
neighbors_named <- as.character(names(vertex_list[neighbors[[i]]])) #grab named vec of neighbors for each vertex
neighbors_named
cache = "G:/My Drive/data/gdsc"
#just return the processed data if its already been done
if(file.exists(paste0(cache, "/gdsc_np.Rda"))) {
load(paste0(cache, "/gdsc_np.Rda"))
message("using cached processed data")
return(df_np)
}
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
devtools::load_all()
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
devtools::load_all()
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
devtools::load_all()
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#get drug data
drug_df <- get_dr(cache = cache)
View(drug_df)
df  = drug_df
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
dplyr::mutate(log2IC50 = as.numeric(.data$LN_IC50),
log2IC50 = exp(.data$log2IC50),
log2IC50 = log2(.data$log2IC50)) %>%
janitor::clean_names()
View(df)
devtools::load_all()
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
?microbenchmark::microbenchmark
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 1)
np <- calc_np_all(exp, g)
length(np)
np2 <- calc_np_all2(exp, g)
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 10)
devtools::document()
devtools::load_all()
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
cache = "G:/My Drive/data/gdsc"
#clean gdsc
df_list <- clean_gdsc(cache = cache)
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
devtools::load_all()
devtools::load_all()
devtools::load_all()
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
cache = "G:/My Drive/data/gdsc/"
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
Rcpp::compileAttributes()
calc_np_all2
fcalc_np_all
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
v = as.character(names(igraph::V(g)))
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
devtools::load_all()
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
devtools::load_all()
v = as.character(names(igraph::V(g)))
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
calc_np_all(exp = exp, g = g)
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
devtools::load_all()
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
devtools::load_all()
load(system.file("test_data/toy_graph.Rda", package = "disruptr"))
#np_all
seeds <- c("OLR1", "APP", "VAV2", "ITGAV", "JAG1", "APOH")
toy_exp <- c(4.9, 9.9, 1.0, 0.2, 7.5, 8.4)
names(toy_exp) <- seeds
expected_np <- c(15.7, -4.8, Inf, -0.94, -2.23, -1.38)
names(expected_np) <- seeds
g <- igraph::induced_subgraph(g, seeds)
exp = toy_exp
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#re-order exp to have the same order as v
exp <- exp[v]
exp
v
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
devtools::load_all()
#run cpp function to do the actual calculation on each node
np_vec <- fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
np_vec
calc_np_all(exp = exp, g = g)
#run cpp function to do the actual calculation on each node
np_vec <- fcalc_np_all(neighbors = neighbors, v = v, exp = exp)
devtools::load_all()
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 4)
#calc np for that expression vector
?microbenchmark::microbenchmark
Rcpp::compileAttributes()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(disruptr)
devtools::load_all()
library(disruptr)
devtools::load_all()
devtools::load_all()
devtools
library(devtools)
use_rcpp_armadillo()
?microbenchmark::microbenchmark
install()
install()
install()
install()
install()
library(disruptr)
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 6)
#calc np for that expression vector
install()
devtools::install()
install()
devtools::install()
"~/"
devtools::install()
devtools::install()
