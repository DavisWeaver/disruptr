library(devtools())
load_all()
g_egf <- calc_np(c_i = 6, c_j = c(10))
load_all()
g_egf <- calc_np(c_i = 6, c_j = c(10))
g_egfi <- calc_np(c_i = 2, c_j = c(10))
g_egfr <- calc_np(c_i = 10, c_j = c(6,2,2,14,3))
g_ras <- calc_np(c_i = 14, c_j = c(10,60))
g_pi3k <- calc_np(c_i = 3, c_j = c(10))
g_raf <- calc_np(c_i = 60, c_j = c(14))
g_raf <- calc_np(c_i = 60, c_j = c(14))
log(60/14)
log(30/14)
log(10/6)
g_egfr <- calc_np(c_i = 10, c_j = c(6,2,2,3,30))
g_ras <- calc_np(c_i = 30, c_j = c(10,20))
g_ras <- calc_np(c_i = 30, c_j = c(10,21))
g_raf <- calc_np(c_i = 20, c_j = 30)
-3.1 + -3.2 + -14.6 + -3.2 + 0 + -3.6 + -8.1
g_egfr <- calc_np(c_i = 10, c_j = c(6,2,2,30))
-3.2 + -13.9 + -3.2 + -3.6 + -8.1
load("G:/My Drive/pkg/disruptr/test_data/toy_graph.Rda")
toy_exp <- runif(n = length(igraph::V(g)), min = 0, max = 10)
library(crosstalkr)
library(magrittr)
library(dplyr)
#Lets use one of the hallmarks datasets or something
h_gene_sets <- msigdbr::msigdbr(species = "Homo sapiens", category = "H")
seed_proteins <- h_gene_sets %>% filter(gs_name == "HALLMARK_ANGIOGENESIS") %>%
select(gene_symbol) %>% unlist() %>%
sample(size = 10)
g <- prep_stringdb(cache = "test_data", min_score = 200)
g <- igraph::subgraph(g, seed_proteins)
toy_exp <- runif(n = length(igraph::V(g)), min = 0, max = 10)
names(toy_exp) <- seed_proteins
?igraph::set_vertex_attr
exp <- toy_exp
g <- igraph::set_vertex_attr(g, name = "expression",value = exp)
g$expression
vertices <- igraph::V(g)
vertices
vertices[1]
vertices[2]
keep_vertices <- vertices[vertices %in% names(exp)]
keep_vertices
vertices[vertices %in% names(exp)]
names(exp)
vertices <- as.character(igraph::V(g))
vertices <- as.character(names(igraph::V(g)))
vertices
keep_vertices <- vertices[vertices %in% names(exp)]
seed_proteins
library(crosstalkr)
g <- prep_stringdb(cache = "test_data", min_score = 200)
library(crosstalkr)
g <- prep_stringdb(cache = "test_data", min_score = 200)
library(crosstalkr)
g <- prep_stringdb(cache = "test_data", min_score = 200)
rm(list = ls())
library(crosstalkr)
library(magrittr)
library(dplyr)
#Lets use one of the hallmarks datasets or something
h_gene_sets <- msigdbr::msigdbr(species = "Homo sapiens", category = "H")
seed_proteins <- h_gene_sets %>% filter(gs_name == "HALLMARK_ANGIOGENESIS") %>%
select(gene_symbol) %>% unlist() %>%
sample(size = 10)
g <- prep_stringdb(cache = "test_data", min_score = 200)
g <- igraph::subgraph(g, seed_proteins)
?igraph::induced_subgraph
g <- prep_stringdb(cache = "test_data", min_score = 200)
g <- igraph::induced_subgraph(g, seed_proteins)
toy_exp <- runif(n = length(igraph::V(g)), min = 0, max = 10)
names(toy_exp) <- seed_proteins
vertices <- as.character(names(igraph::V(g)))
names(toy_exp) <- seed_proteins
exp <- toy_exp
keep_vertices <- vertices[vertices %in% names(exp)]
g <- igraph::induced_subgraph(g, keep_vertices)
exp <- exp[names(exp) %in% keep_vertices]
load_all()
devtools::load_all()
#get a list of neighbors for each node
neighbors <-
lapply(1:length(vertices),
get_neighbors, g = g)
neighbors
names(neighborList) <- genesInBoth
names(neighborList) <- vertices
names(neighbors) <- vertices
View(neighbors)
i <- 1
c_j <- sum(exp[neighbors[[vertices[i]]]])
c_i <- exp[vertices[i]]
#loop over all vertices
np_matrix <- matrix(nrow = length(vertices), ncol = 2)
g_i <- calc_np(c_i = c_i, c_j = c_j)
g_i
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec[i] <- calc_np(c_i = c_i, c_j = c_j)
}
np_vec
?vector
#loop over all vertices
np_vec <- vector(mode = "name", length = length(vertices))
#loop over all vertices
np_vec <- vector(mode = "any", length = length(vertices))
#loop over all vertices
np_vec <- vector(mode = "list", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec[i] <- calc_np(c_i = c_i, c_j = c_j)
}
View(np_vec)
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec <- calc_np(c_i = c_i, c_j = c_j)
}
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(vertices))
for(i in seq_along(vertices)) {
c_j <- sum(exp[neighbors[[vertices[i]]]]) #sum up the concentration of all neighbors
c_i <- exp[vertices[i]]
np_vec[i] <- calc_np(c_i = c_i, c_j = c_j)
}
names(np_vec) <- vertices #rename the output vector
np_vec
library(devtools)
load_all()
library(crosstalkr)
library(magrittr)
library(dplyr)
#Lets use one of the hallmarks datasets or something
h_gene_sets <- msigdbr::msigdbr(species = "Homo sapiens", category = "H")
seed_proteins <- h_gene_sets %>% filter(gs_name == "HALLMARK_ANGIOGENESIS") %>%
select(gene_symbol) %>% unlist() %>%
sample(size = 25)
g <- prep_stringdb(cache = "test_data", min_score = 200)
g <- igraph::induced_subgraph(g, seed_proteins)
toy_exp <- runif(n = length(igraph::V(g)), min = 0, max = 10)
names(toy_exp) <- seed_proteins
v = seed_proteins[2]
v==1
g_new <- igraph::delete_vertices(g = g, v = v)
igraph::gsize(g_new)
igraph::gsize(g)
state_function = calc_np_all
s_old <- state_function(g = g, exp = toy_exp)
s_new <- state_function(g = g_new, exp = toy_exp)
s_old
s_new
plot(g)
get_neighbors(v, g)
s_old - s_new
s_old <- s_old[names(s_old) %in% names(s_new)]
s+old.packages()
s_old
s_old - s_new
plot(g_new)
get_neighbors("LPL", g)
install.packages("pzfx")
df <- pzfx::read_pzfx("B:/Mina/PC9_evo_11drugs/021621 CTG v ABwash v AB/11 drug assay all conditions.pzfx")
View(df)
devtools::install()
library(devtools)
use_r("data_ingest")
exp_df <- readr::read_csv2(https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip)
exp_df <- readr::read_csv2("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/preprocessed/Cell_line_RMA_proc_basalExp.txt.zip")
exp_df <- readr::read_tsv(paste0(cache, "/Cell_line_RMA_proc_basalExp.txt"))
cache = "G:/My Drive/data/gdsc"
exp_df <- readr::read_tsv(paste0(cache, "/Cell_line_RMA_proc_basalExp.txt"))
library(devtools)
document()
library(devtools)
document()
?person
document()
document()
?disruptr
install()
?disruptr
library(disruptr)
?disruptr
drug_df <- readxl::read_xlsx("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx")
drug_df <- readxl::read_xlsx(url("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx")
}
#' clean the GDSC data
#'
#'
#' @param cache filepath specifying where to store store downloaded/ processed data
#'
#' @export
clean_gdsc <- function(cache = NULL) {
if(is.null(cache)) {
stop("Please specify a filepath specifying where to store data")
}
meta_df <- clean_meta()
response_df <- clean_response()
exp_df <- clean_expression()
}
#' helper function for processing the gdsc metadata
#'
#' Here we read in the meta data for GDSC. This contains all the cell lines by
#' various identifiers (we use `COSMIC_ID`) and descriptions of each line,
#' including tissue and histology of origin. We also do a quick cleaning step by
#' adjusting a variable name containing a forward slash (`/`) to avoid errors later.
#' We will also split out epithelial vs non epithelial cell lines.
#'
#'
clean_meta <- function() {
cell_line_details <- read.csv2("../GDSC2_Data/cell_line_details.csv", sep=",",
stringsAsFactors = FALSE)
levels(cell_line_details$Cancer.Type..matching.TCGA.label.) <-
c(levels(cell_line_details$Cancer.Type..matching.TCGA.label.), "COAD&READ")
cell_line_details$Cancer.Type..matching.TCGA.label.[cell_line_details$Cancer.Type..matching.TCGA.label.=="COAD/READ"] <- "COAD&READ"
gdsc.interest <- c("head and neck", "oesophagus", "breast", "biliary_tract",
"digestive_system_other","large_intestine", "stomach",
"lung_NSCLC_adenocarcinoma", "lung_NSCLC_carcinoid",
"lung_NSCLC_large cell", "lung_NSCLC_not specified",
"lung_NSCLC_squamous_cell_carcinoma", "Lung_other",
"pancreas", "skin_other", "thyroid", "Bladder", "cervix",
"endometrium", "ovary", "prostate", "testis",
"urogenital_system_other", "uterus", "liver", "kidney")
epiGDSC_cell_lines <- cell_line_details[cell_line_details$GDSC.Tissue.descriptor.2
%in% gdsc.interest, ]$COSMIC.identifier
NONepiGDSC_cell_lines <- cell_line_details[!(cell_line_details$GDSC.Tissue.descriptor.2
%in% gdsc.interest), ]$COSMIC.identifier
}
#' Import and clean drug response data
#'
#' Here we import the drug response data from the second version of the GDSC dataset (GDSC2).
#' Each cell line can still be identified using `COSMIC_ID`.
#' We clean the data by adjusting data types and converting IC50 from natural log to log2.
#'
#'
clean_response <- function() {
#read data in
dr_gdsc2 <- read.csv2("../GDSC2_Data/GDSC2_fitted_dose_response_17Jul19.csv", #need to do something about the dates
sep = ",", stringsAsFactors = FALSE)
#pre-processing
dr_gdsc2$MIN_CONC <- as.numeric(dr_gdsc2$MIN_CONC)
dr_gdsc2$MAX_CONC <- as.numeric(dr_gdsc2$MAX_CONC)
dr_gdsc2$LN_IC50 <- as.numeric(dr_gdsc2$LN_IC50)
dr_gdsc2$AUC <- as.numeric(dr_gdsc2$AUC)
dr_gdsc2$RMSE <- as.numeric(dr_gdsc2$RMSE)
dr_gdsc2$Z_SCORE <- as.numeric(dr_gdsc2$Z_SCORE)
dr_gdsc2$LN_IC50 <- exp(dr_gdsc2$LN_IC50)
#log2 normalization
dr_gdsc2$LN_IC50 <- log2(dr_gdsc2$LN_IC50)
dr_gdsc2_colnames <- colnames(dr_gdsc2)
dr_gdsc2_colnames[16] <- "IC50"
colnames(dr_gdsc2) <- dr_gdsc2_colnames
}
#' Function to clean expression data from gdsc
#' We'll read in the GDSC expression data, which comes from microarray experiments.
#' Details on the experimental protocols can be found
#' [here](https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources/Home.html).
#'
#'
#' @importFrom magrittr %>%
clean_expression <- function() {
#read data in
expr_gdsc_data <- read.csv2("../GDSC2_Data/Cell_line_RMA_proc_basalExp.csv",
sep = ",", stringsAsFactors = FALSE)
#do some cleaning.
expr_gdsc_data <- expr_gdsc_data[!(expr_gdsc_data$GENE_SYMBOLS==""), ]
}
drug_df <- readxl::read_xlsx(url("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx"))
drug_df <- readxl::read_xlsx(url("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources/Data/suppData/TableS4A.xlsx"))
cache = "G:/My Drive/data/gdsc"
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx",
destfile = paste0(cache, "/gdsc_drug.xlsx"))
drug_df <- readxl::read_xlsx(paste0(cache, "/gdsc_drug.xlsx"))
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx",
destfile = paste0(cache, "/TableS4A.xlsx"))
drug_df <- readxl::read_xlsx(paste0(cache, "/TableS4A.xlsx"))
readxl::read_excel("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx")
url1<- "https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx"
httr::GET(url1, write_disk(tf <- tempfile(fileext = ".xlsx")))
httr::GET(url1, httr::write_disk(tf <- tempfile(fileext = ".xlsx")))
df <- readxl::read_excel(tf)
View(df)
?readxl::read_excel
#read into R
drug_df <- readxl::read_xlsx(paste0(cache, "/TableS4A.xlsx"), skip = 3)
#read into R
df <- readxl::read_excel(tf, skip = 3)
View(df)
#read into R
df <- readxl::read_excel(tf, skip = 4)
View(df)
#read into R
df <- readxl::read_excel(tf, skip = 5)
View(df)
colnames(df)[1:2] <- c("cosmic_identifier", "sample_name")
View(df)
?curl::curl_download
curl::curl_download("ftp://ftp.sanger.ac.uk/pub/project/cancerrxgene/releases/current_release/Cell_Lines_Details.xlsx",
destfile = paste0(cache, "/Cell_Lines_Details.xlsx"))
df <- readxl::read_excel(paste0(cache, "/Cell_Lines_Details.xlsx"))
View(df)
document()
load_all()
devtools::load_all()
devtools::load_all()
df <- get_drug()
View(df)
devtools::load_all()
test <- get_gdsc
test <- get_gdsc(cache = "G:/My Drive/data/gdsc")
View(test)
cache = "G:/My Drive/data/gdsc"
df_list <- get_gdsc(cache = cache)
View(df_list)
#grab the metadata out of the list of dirty dataframes
meta_df <- df_list[[3]]
df <- meta_df
View(df)
df <- janitor::clean_names(df)
View(df)
levels(df$cancer_type_matching_tcga_label) <-
c(levels(df$cancer_type_matching_tcga_label), "COAD&READ")
df$cancer_type_matching_tcga_label[df$cancer_type_matching_tcga_label=="COAD/READ"] <- "COAD&READ"
gdsc_interest <- c("head and neck", "oesophagus", "breast", "biliary_tract",
"digestive_system_other","large_intestine", "stomach",
"lung_NSCLC_adenocarcinoma", "lung_NSCLC_carcinoid",
"lung_NSCLC_large cell", "lung_NSCLC_not specified",
"lung_NSCLC_squamous_cell_carcinoma", "Lung_other",
"pancreas", "skin_other", "thyroid", "Bladder", "cervix",
"endometrium", "ovary", "prostate", "testis",
"urogenital_system_other", "uterus", "liver", "kidney")
df <-
dplyr::mutate(df,
epi_origin = ifelse(
gdsc_tissue_descriptor_2 %in% gdsc_interest,
TRUE,
FALSE
))
View(df)
#grab and clean the response data
response_df <- df_list[[2]]
df <- response_df
View(response_df)
is.numeric(response_df$`BMS-708163...15`)
?dplyr::across
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
dplyr::mutate(dplyr::across(-c(1,2), as.numeric))
warnings()
is.numeric(df$`TL-2-105`)
?tidyr::pivot_longer
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
dplyr::mutate(dplyr::across(-c(1,2), as.numeric)) %>%
tidyr::pivot_longer(cols = -c(1,2), names_to = "drug", values_to = "IC50")
View(df)
df <- response_df
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
tidyr::pivot_longer(cols = -c(1,2), names_to = "drug", values_to = "IC50") %>%
mutate(IC50 = as.numeric(.data$IC50),
IC50 = exp(.data$IC50),
IC50 = log2(.data$IC50))
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
tidyr::pivot_longer(cols = -c(1,2), names_to = "drug", values_to = "IC50") %>%
dplyr::mutate(IC50 = as.numeric(.data$IC50),
IC50 = exp(.data$IC50),
IC50 = log2(.data$IC50))
?group_modify
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_map(~scale(.x), .keep = TRUE)
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_map(~scale(.x$IC50), .keep = TRUE)
View(z_df)
z_df[[1]]
?scale
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_map(~as.numeric(scale(.x$IC50)), .keep = TRUE)
View(z_df)
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_modify(
~tibble(
cosmic_identifier = .x$cosmic_identifier,
sample_name = .x$sample_name,
IC50 = .x$IC50,
z_score = as.numeric(scale(.x$IC50))
), .keep = TRUE)
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_modify(
~data.frame(
cosmic_identifier = .x$cosmic_identifier,
sample_name = .x$sample_name,
IC50 = .x$IC50,
z_score = as.numeric(scale(.x$IC50))
), .keep = TRUE)
View(test)
View(z_df)
filter(df, drug = "(5Z)-7-Oxozeaenol", cosmic_identifier = 906838)
dplyr::filter(df, drug = "(5Z)-7-Oxozeaenol", cosmic_identifier = 906838)
dplyr::filter(df, drug == "(5Z)-7-Oxozeaenol", cosmic_identifier == 906838)
View(z_df)
library(devtools)
load_all()
load_all()
response_df <- clean_response(response_df)
View(df)
View(response_df)
exp_df <- df_list[[1]]
df <- exp_df
View(df)
?tidyr::pivot_longer
df <- df %>%
tidyr::pivot_longer(-c(1,2), names_to = "cell_line", values_to = "expression")
View(df)
df <- exp_df
df <- df %>%
tidyr::pivot_longer(-c(1,2), names_to = "cell_line",
values_to = "expression",
names_prefix = "DATA\\.")
View(meta_df)
df <- exp_df
df <- df %>%
tidyr::pivot_longer(-c(1,2), names_to = "cell_line",
values_to = "expression",
names_prefix = "DATA\\.") %>%
janitor::clean_names() %>%
dplyr::mutate(log_expression = log2(expression))
load_all()
document()
install()
use_r("gdsc_helpers")
library(devtools)
load_all()
cache = "G:/My Drive/data/gdsc"
df_list <- clean_gdsc(cache = cache)
df_exp <- df_list[[3]]
View(df_exp)
cell_lines <- unique(df_exp$cell_line)
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
cache = "G:/My Drive/data/gdsc"
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
devtools::load_all()
#clean gdsc
df_list <- clean_gdsc(cache = cache)
?calc_np_all
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
i <- 1
#isolate one cell line
df_i <- df_exp %>%
dplyr::filter(cell_line == cell_lines[i])
devtools::load_all()
#add np to df_i for that cell line
test <- calc_np_i(df_i, g = g)
View(test)
cache
load_all()
devtools::load_all()
calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
library(foreach)
calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
devtools::install()
document()
devtools::document()
devtools::install()
disruptr::calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
devtools::document()
devtools::install()
disruptr::calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
disruptr::calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
devtools::install()
install.packages("RPostgreSQL")
cache = "G:/My Drive/data/gdsc"
#get PPI
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
cache
paste0(cache, "/stringdb.Rda")
file.exists(paste0(cache, "/stringdb.Rda"))
prep_stringdb
crosstalkr::prep_stringdb()
crosstalkr::prep_stringdb
cache = "G:/My Drive/data/gdsc"
