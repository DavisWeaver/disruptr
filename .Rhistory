library(disruptr)
devtools::load_all()
devtools::load_all()
devtools
library(devtools)
use_rcpp_armadillo()
?microbenchmark::microbenchmark
install()
install()
install()
install()
install()
library(disruptr)
cache = "G:/My Drive/data/gdsc/" #will need to define a different cache depending on the compute environment
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 600)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
cell_line_test <- cell_lines[1]
df <- dplyr::filter(df_exp, cell_line == cell_line_test)
exp <- df$log_expression
names(exp) <- df$gene_symbols
microbenchmark::microbenchmark(calc_np_all(exp = exp, g = g), calc_np_all2(exp = exp, g = g), times = 6)
#calc np for that expression vector
install()
devtools::install()
install()
devtools::install()
"~/"
devtools::install()
devtools::install()
library(devtools)
use_r("pipeline")
use_test()
document()
install()
load(system.file("test_data/rld_Counts.csv", package = "disruptr"))
load(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
View(df)
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
library(devtools)
install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
View(df)
View(df)
##label the first column as gene name
if(is.character[df[,1]]) {
colnames(df)[1] <- "gene_name"
} else if(is.character(rownames(df))) {
df$gene_name <- rownames(df)
}
##label the first column as gene name
if(is.character(df[,1])) {
colnames(df)[1] <- "gene_name"
} else if(is.character(rownames(df))) {
df$gene_name <- rownames(df)
}
View(df)
?tidyr::pivot_longer
df <- df %>% tidyr::pivot_longer(-.data$gene_name,
names_to = "sample_name",
values_to = "expression")
library(magrittr)
df <- df %>% tidyr::pivot_longer(-.data$gene_name,
names_to = "sample_name",
values_to = "expression")
df <- df %>% dplyr::filter(.data$expression > 0)
load_all()
df <- experiment_breakout(df)
View(df)
document()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
?dplyr::slice_sample
df_small <- dplyr::slice_sample(prop = 0.02)
df_small <- dplyr::slice_sample(df, prop = 0.02)
View(df_small)
load_all()
?compute_np
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncore = 6)
load_all()
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncore = 6)
devtools::load_all()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncore = 6)
exp_mat = df_small
cache = "G:/My Drive/data/mir_paper/"
mir_paper = TRUE
ppi = "biogrid"
experiment_name = "EWS_cells"
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
View(df)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
#get list of cell lines to iterate over
samples <- unique(df$sample_name)
View(df)
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 6, experiment_name = "test")
devtools::load_all()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 6, experiment_name = "test")
devtools::load_all()
cache = "G:/My Drive/data/mir_paper"
experiment_name = "mir_paper"
ppi = "biogrid"
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
exp_mat = df_small
mir_paper = TRUE
ncores = 1
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
View(df)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
#get list of cell lines to iterate over
if(mir_paper == TRUE) {
samples <- unique(df$cell_line)
} else {
samples <- unique(df$sample_name)
}
i <- 1
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
}
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
#add np to df_i for that cell line
disruptr::calc_np_i(df_i, g = g)
df_i
df = df_i
#grab expression vector
exp <- df$log_expression
names(exp) <- df$gene_symbols
#calc np for that expression vector- use cpp internal version
np <- calc_np_all2(exp, g)
np
exp
names(exp)
names(exp) <- df[,1] #this will break if gene name is not the first column
#calc np for that expression vector- use cpp internal version
np <- calc_np_all2(exp, g)
np_df <- data.frame(gene_symbols = names(np),
np = np)
df <- dplyr::left_join(df, np_df)
devtools::load_all()
rm(list=ls(
))
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
install()
devtools::install()
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(test1)
ppi = "biogrid"
experiment_name = "test1"
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
cache = "G:/My Drive/data/mir_paper"
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
g
i <- 1
mir_paper =TRUE
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
library(magrittr)
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
View(df)
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
devtools::load_all()
exp_mat <- df_small
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
#get list of cell lines to iterate over
if(mir_paper == TRUE) {
samples <- unique(df$cell_line)
} else {
samples <- unique(df$sample_name)
}
if(mir_paper == TRUE) {
df_i <- df %>%
dplyr::filter(cell_line == samples[i])
} else {
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
}
#grab expression vector
exp <- df$log_expression
names(exp) <- df[,1] #this will break if gene name is not the first column
v = as.character(names(igraph::V(g)))
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
length(g)
gsize(g)
igraph::gsize(g)
View(df_i)
devtools::load_all()
#first add expression to the subgraph.
out_list <- add_expression(exp = exp, g = g)
g <- out_list[[2]]
exp <- out_list[[1]]
exp
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
#grab expression vector
exp <- df$log_expression
names(exp) <- df[,1] #this will break if gene name is not the first column
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
devtools::load_all()
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
igraph::gsize(g)
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
exp
View(df_i)
install()
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(test1)
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(test1)
View(df_small)
devtools::load_all()
cache = "G:/My Drive/data/mir_paper"
experiment_name = "test"
ppi = "biogrid"
min_score = NULL
exp_mat <- df_small
ncores =
1
if(is.null(cache)) {
stop("please provide a cache for saving and loading data/output")
}
#load ppi
if(ppi == "biogrid") {
g <- crosstalkr::prep_biogrid(cache = cache)
} else if (ppi == "stringdb") {
g <- crosstalkr::prep_stringdb(cache = cache, min_score = min_score)
} else {
stop("ppi must be either 'biogrid' or 'stringdb'")
}
length(igraph::V(g))
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
mir_paper = TRUE
#convert expression matrix to tidy data frame + do some cleaning
df <- tidy_expression(exp_mat)
if(mir_paper == TRUE) { #just split up the information in the sample_id
df <- experiment_breakout(df)
}
samples <- unique(df$sample_name)
#set up parallel execution
cl <- parallel::makeCluster(ncores)
doParallel::registerDoParallel(cl)
I <- 1
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
i = 1
#isolate one cell line
df_i <- df %>%
dplyr::filter(sample_name == samples[i])
View(df_i)
View(df_i)
View(exp_mat)
View(df_small)
View(df_small)
View(df_i)
table(df$sample_name)
log(0)
log2(0)
log(0) <-
d
log(0) < 0
hist(df$expression)
hist(df$log_expression)
hist(df$expression)
hist(df$log_expression)
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(df_small)
View(test1)
df_short <- df[,1:2]
View(df_short)
test2 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
test2 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_short,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(test2)
log2(2.33)
sum(!is.na(test2$np))
sum(test2$expression>0)
devtools::install()
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
df_short <- df[,1:2]
test2 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_short,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(test2)
sum(!is.na(test2$np))
View(test1)
View(df_small)
setwd("C:/Users/dtw43/Documents/miRNA_Targeting")
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
df_short <- df[,1:2] #this grabs exactly one sample
test2 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_short,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
View(test2)
library(devtools)
document()
library(devtools)
devtools::install()
library(disruptr)
df <- read.csv(system.file("test_data/rld_Counts.csv", package = "disruptr"))
df_small <- dplyr::slice_sample(df, prop = 0.02)
test1 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_small,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
df_short <- df[,1:2] #this grabs exactly one sample
test2 <- disruptr::compute_np(cache = "G:/My Drive/data/mir_paper/", exp_mat = df_short,
mir_paper = TRUE, ncores = 4, experiment_name = "test")
#Trying to figure out what gives with all the NAs
df_short <- tidy_expression(df_short)
View(df_short)
length(unique(df_short$gene_name))
g <- crosstalkr::prep_biogrid(cache = "G:/My Drive/data/mir_paper/")
View(test2)
v = as.character(names(igraph::V(g)))
exp <- df_short$expression
names(exp) <- df_short$gene_name
length(exp)
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
devtools::load_all()
#first add expression to the subgraph.
g <- add_expression(exp = exp, g = g)
vertices <- as.character(names(igraph::V(g))) #in most cases this will be the same as `v`
# remove any names of exp that are not in the graph.
exp <- exp[names(exp) %in% vertices]
length(exp)
length(igraph::V(g))
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
# need to do the same thing for v (because sometimes there will be neighbors of a given node that aren't in the ppi)
v <- v[v %in% vertices]
#get a list of neighbors for each node
neighbors <-
lapply(v,
get_neighbors, g = g)
names(neighbors) <- v
#loop over all vertices
np_vec <- vector(mode = "numeric", length = length(v))
names(np_vec) <- v
vertex_list <- igraph::V(g) #slightly different than "vertices" - used for indexing
View(test2)
?Position
Position(function(x) x == "AADAC", x =test2$gene_name)
Position(function(x) is.na(x), x = test2$np)
Position(function(x) x == "AADACP1", x = test2$gene_name)
i = 22
exp["AADACP1"]
