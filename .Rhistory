clean_meta <- function() {
cell_line_details <- read.csv2("../GDSC2_Data/cell_line_details.csv", sep=",",
stringsAsFactors = FALSE)
levels(cell_line_details$Cancer.Type..matching.TCGA.label.) <-
c(levels(cell_line_details$Cancer.Type..matching.TCGA.label.), "COAD&READ")
cell_line_details$Cancer.Type..matching.TCGA.label.[cell_line_details$Cancer.Type..matching.TCGA.label.=="COAD/READ"] <- "COAD&READ"
gdsc.interest <- c("head and neck", "oesophagus", "breast", "biliary_tract",
"digestive_system_other","large_intestine", "stomach",
"lung_NSCLC_adenocarcinoma", "lung_NSCLC_carcinoid",
"lung_NSCLC_large cell", "lung_NSCLC_not specified",
"lung_NSCLC_squamous_cell_carcinoma", "Lung_other",
"pancreas", "skin_other", "thyroid", "Bladder", "cervix",
"endometrium", "ovary", "prostate", "testis",
"urogenital_system_other", "uterus", "liver", "kidney")
epiGDSC_cell_lines <- cell_line_details[cell_line_details$GDSC.Tissue.descriptor.2
%in% gdsc.interest, ]$COSMIC.identifier
NONepiGDSC_cell_lines <- cell_line_details[!(cell_line_details$GDSC.Tissue.descriptor.2
%in% gdsc.interest), ]$COSMIC.identifier
}
#' Import and clean drug response data
#'
#' Here we import the drug response data from the second version of the GDSC dataset (GDSC2).
#' Each cell line can still be identified using `COSMIC_ID`.
#' We clean the data by adjusting data types and converting IC50 from natural log to log2.
#'
#'
clean_response <- function() {
#read data in
dr_gdsc2 <- read.csv2("../GDSC2_Data/GDSC2_fitted_dose_response_17Jul19.csv", #need to do something about the dates
sep = ",", stringsAsFactors = FALSE)
#pre-processing
dr_gdsc2$MIN_CONC <- as.numeric(dr_gdsc2$MIN_CONC)
dr_gdsc2$MAX_CONC <- as.numeric(dr_gdsc2$MAX_CONC)
dr_gdsc2$LN_IC50 <- as.numeric(dr_gdsc2$LN_IC50)
dr_gdsc2$AUC <- as.numeric(dr_gdsc2$AUC)
dr_gdsc2$RMSE <- as.numeric(dr_gdsc2$RMSE)
dr_gdsc2$Z_SCORE <- as.numeric(dr_gdsc2$Z_SCORE)
dr_gdsc2$LN_IC50 <- exp(dr_gdsc2$LN_IC50)
#log2 normalization
dr_gdsc2$LN_IC50 <- log2(dr_gdsc2$LN_IC50)
dr_gdsc2_colnames <- colnames(dr_gdsc2)
dr_gdsc2_colnames[16] <- "IC50"
colnames(dr_gdsc2) <- dr_gdsc2_colnames
}
#' Function to clean expression data from gdsc
#' We'll read in the GDSC expression data, which comes from microarray experiments.
#' Details on the experimental protocols can be found
#' [here](https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources/Home.html).
#'
#'
#' @importFrom magrittr %>%
clean_expression <- function() {
#read data in
expr_gdsc_data <- read.csv2("../GDSC2_Data/Cell_line_RMA_proc_basalExp.csv",
sep = ",", stringsAsFactors = FALSE)
#do some cleaning.
expr_gdsc_data <- expr_gdsc_data[!(expr_gdsc_data$GENE_SYMBOLS==""), ]
}
drug_df <- readxl::read_xlsx(url("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx"))
drug_df <- readxl::read_xlsx(url("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources/Data/suppData/TableS4A.xlsx"))
cache = "G:/My Drive/data/gdsc"
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx",
destfile = paste0(cache, "/gdsc_drug.xlsx"))
drug_df <- readxl::read_xlsx(paste0(cache, "/gdsc_drug.xlsx"))
download.file("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx",
destfile = paste0(cache, "/TableS4A.xlsx"))
drug_df <- readxl::read_xlsx(paste0(cache, "/TableS4A.xlsx"))
readxl::read_excel("https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx")
url1<- "https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx"
httr::GET(url1, write_disk(tf <- tempfile(fileext = ".xlsx")))
httr::GET(url1, httr::write_disk(tf <- tempfile(fileext = ".xlsx")))
df <- readxl::read_excel(tf)
View(df)
?readxl::read_excel
#read into R
drug_df <- readxl::read_xlsx(paste0(cache, "/TableS4A.xlsx"), skip = 3)
#read into R
df <- readxl::read_excel(tf, skip = 3)
View(df)
#read into R
df <- readxl::read_excel(tf, skip = 4)
View(df)
#read into R
df <- readxl::read_excel(tf, skip = 5)
View(df)
colnames(df)[1:2] <- c("cosmic_identifier", "sample_name")
View(df)
?curl::curl_download
curl::curl_download("ftp://ftp.sanger.ac.uk/pub/project/cancerrxgene/releases/current_release/Cell_Lines_Details.xlsx",
destfile = paste0(cache, "/Cell_Lines_Details.xlsx"))
df <- readxl::read_excel(paste0(cache, "/Cell_Lines_Details.xlsx"))
View(df)
document()
load_all()
devtools::load_all()
devtools::load_all()
df <- get_drug()
View(df)
devtools::load_all()
test <- get_gdsc
test <- get_gdsc(cache = "G:/My Drive/data/gdsc")
View(test)
cache = "G:/My Drive/data/gdsc"
df_list <- get_gdsc(cache = cache)
View(df_list)
#grab the metadata out of the list of dirty dataframes
meta_df <- df_list[[3]]
df <- meta_df
View(df)
df <- janitor::clean_names(df)
View(df)
levels(df$cancer_type_matching_tcga_label) <-
c(levels(df$cancer_type_matching_tcga_label), "COAD&READ")
df$cancer_type_matching_tcga_label[df$cancer_type_matching_tcga_label=="COAD/READ"] <- "COAD&READ"
gdsc_interest <- c("head and neck", "oesophagus", "breast", "biliary_tract",
"digestive_system_other","large_intestine", "stomach",
"lung_NSCLC_adenocarcinoma", "lung_NSCLC_carcinoid",
"lung_NSCLC_large cell", "lung_NSCLC_not specified",
"lung_NSCLC_squamous_cell_carcinoma", "Lung_other",
"pancreas", "skin_other", "thyroid", "Bladder", "cervix",
"endometrium", "ovary", "prostate", "testis",
"urogenital_system_other", "uterus", "liver", "kidney")
df <-
dplyr::mutate(df,
epi_origin = ifelse(
gdsc_tissue_descriptor_2 %in% gdsc_interest,
TRUE,
FALSE
))
View(df)
#grab and clean the response data
response_df <- df_list[[2]]
df <- response_df
View(response_df)
is.numeric(response_df$`BMS-708163...15`)
?dplyr::across
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
dplyr::mutate(dplyr::across(-c(1,2), as.numeric))
warnings()
is.numeric(df$`TL-2-105`)
?tidyr::pivot_longer
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
dplyr::mutate(dplyr::across(-c(1,2), as.numeric)) %>%
tidyr::pivot_longer(cols = -c(1,2), names_to = "drug", values_to = "IC50")
View(df)
df <- response_df
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
tidyr::pivot_longer(cols = -c(1,2), names_to = "drug", values_to = "IC50") %>%
mutate(IC50 = as.numeric(.data$IC50),
IC50 = exp(.data$IC50),
IC50 = log2(.data$IC50))
#all but the first two columns (the two identifiers, we want to be numeric)
df <- df %>%
tidyr::pivot_longer(cols = -c(1,2), names_to = "drug", values_to = "IC50") %>%
dplyr::mutate(IC50 = as.numeric(.data$IC50),
IC50 = exp(.data$IC50),
IC50 = log2(.data$IC50))
?group_modify
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_map(~scale(.x), .keep = TRUE)
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_map(~scale(.x$IC50), .keep = TRUE)
View(z_df)
z_df[[1]]
?scale
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_map(~as.numeric(scale(.x$IC50)), .keep = TRUE)
View(z_df)
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_modify(
~tibble(
cosmic_identifier = .x$cosmic_identifier,
sample_name = .x$sample_name,
IC50 = .x$IC50,
z_score = as.numeric(scale(.x$IC50))
), .keep = TRUE)
z_df <- df %>%
dplyr::group_by(drug) %>%
dplyr::group_modify(
~data.frame(
cosmic_identifier = .x$cosmic_identifier,
sample_name = .x$sample_name,
IC50 = .x$IC50,
z_score = as.numeric(scale(.x$IC50))
), .keep = TRUE)
View(test)
View(z_df)
filter(df, drug = "(5Z)-7-Oxozeaenol", cosmic_identifier = 906838)
dplyr::filter(df, drug = "(5Z)-7-Oxozeaenol", cosmic_identifier = 906838)
dplyr::filter(df, drug == "(5Z)-7-Oxozeaenol", cosmic_identifier == 906838)
View(z_df)
library(devtools)
load_all()
load_all()
response_df <- clean_response(response_df)
View(df)
View(response_df)
exp_df <- df_list[[1]]
df <- exp_df
View(df)
?tidyr::pivot_longer
df <- df %>%
tidyr::pivot_longer(-c(1,2), names_to = "cell_line", values_to = "expression")
View(df)
df <- exp_df
df <- df %>%
tidyr::pivot_longer(-c(1,2), names_to = "cell_line",
values_to = "expression",
names_prefix = "DATA\\.")
View(meta_df)
df <- exp_df
df <- df %>%
tidyr::pivot_longer(-c(1,2), names_to = "cell_line",
values_to = "expression",
names_prefix = "DATA\\.") %>%
janitor::clean_names() %>%
dplyr::mutate(log_expression = log2(expression))
load_all()
document()
install()
use_r("gdsc_helpers")
library(devtools)
load_all()
cache = "G:/My Drive/data/gdsc"
df_list <- clean_gdsc(cache = cache)
df_exp <- df_list[[3]]
View(df_exp)
cell_lines <- unique(df_exp$cell_line)
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
cache = "G:/My Drive/data/gdsc"
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
devtools::load_all()
#clean gdsc
df_list <- clean_gdsc(cache = cache)
?calc_np_all
#clean gdsc
df_list <- clean_gdsc(cache = cache)
#grab ppi to use for the scaffold
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
#grab expression data
df_exp <- df_list[[3]]
#get list of cell lines to iterate over
cell_lines <- unique(df_exp$cell_line)
i <- 1
#isolate one cell line
df_i <- df_exp %>%
dplyr::filter(cell_line == cell_lines[i])
devtools::load_all()
#add np to df_i for that cell line
test <- calc_np_i(df_i, g = g)
View(test)
cache
load_all()
devtools::load_all()
calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
library(foreach)
calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
devtools::install()
document()
devtools::document()
devtools::install()
disruptr::calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
devtools::document()
devtools::install()
disruptr::calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
disruptr::calc_gdsc_np(cache = "G:/My Drive/data/gdsc", ncores = 6)
devtools::install()
install.packages("RPostgreSQL")
cache = "G:/My Drive/data/gdsc"
#get PPI
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
cache
paste0(cache, "/stringdb.Rda")
file.exists(paste0(cache, "/stringdb.Rda"))
prep_stringdb
crosstalkr::prep_stringdb()
crosstalkr::prep_stringdb
cache = "G:/My Drive/data/gdsc"
cache = "G:/My Drive/data/gdsc"
#get PPI
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
ncores = 1
df <- calc_gdsc_np(cache = cache, ncores = ncores)
library(devtools)
load_all()
df <- calc_gdsc_np(cache = cache, ncores = ncores)
#compute the change in np for EGFR for each cell line.
cell_lines <- unique(df$cell_line)
View(df)
i <- 1
df_i <- dplyr::filter(df, cell_line == cell_lines[i])
exp <- df_i$expression
names(exp) <- df_i$gene_symbols
range(exp)
load_all()
load_all()
exp <- get_exp(df = df, cell_lines = cell_lines, i = i)
node_repression(g = g, v_rm = v_rm, state_function = calc_np_all,
exp = exp)
v_rm = "EGFR"
node_repression(g = g, v_rm = v_rm, state_function = calc_np_all,
exp = exp)
v = get_neighbors(g, v_rm) #get neighbors
?get_neighbors
v = get_neighbors(v_rm, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
v = as.character(names(igraph::V(g)))
v <- get_neighbors(v_rm, g) #get neighbors
v <- as.character(names(igraph::V(g)[v]))
load_all()
load_all()
test <- node_repression(g = g, v_rm = v_rm, state_function = calc_np_all,
exp = exp, neighbors_only = TRUE)
test <- node_repression(g = g, v_rm = v_rm, state_function = calc_np_all,
exp = exp, neighbors_only = TRUE)
load_all()
test <- node_repression(g = g, v_rm = v_rm, state_function = calc_np_all,
exp = exp, neighbors_only = TRUE)
View(df_i)
calc_np_all(exp = exp, g = g, v = c("EGFR", "FAKE"))
calc_np_all(exp = exp, g = g, v = c("EGFR"))
load_all()
calc_np_all(exp = exp, g = g, v = c("EGFR", "FAKE"))
calc_np_all(exp = exp, g = g, v = c("EGFR"))
test <- node_repression(g = g, v_rm = v_rm, state_function = calc_np_all,
exp = exp, neighbors_only = TRUE)
test
sum(test)
repression_vector <- test
View(df_i)
test["EGFR"]
dplyr::filter(df_i, gene_symbols == "EGFR")
df_repression <- data.frame(gene_symbols = names(repression_vector),
np_diff = repression_vector)
View(df_repression)
df_i <- dplyr::left_join(df_i, df_repression)
View(df_i)
abs
?abs
df_i <- dplyr::mutate(df_i,
np_diff = ifelse(gene_symbols == v_rm, abs(np), np_diff),
np_diff = ifelse(is.na(np_diff), 0, np_diff))
View(df_i)
dplyr::filter(df_i, gene_symbols == "EGFR")
load_all()
library(devtools)
load_all()
cache = "G/My Drive/data/gdsc"
ncores =1
v_rm = "EGFR"
#get PPI
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
cache = "G:/My Drive/data/gdsc"
#get PPI
g <- crosstalkr::prep_stringdb(cache = cache, min_score = 400)
#get or compute network potential for gdsc
df <- calc_gdsc_np(cache = cache, ncores = ncores)
#get named expression vector
exp <- get_exp(df = df, cell_lines = cell_lines, i = i)
#compute the change in np for EGFR for each cell line.
cell_lines <- unique(df$cell_line)
i <- 1
#get named expression vector
exp <- get_exp(df = df, cell_lines = cell_lines, i = i)
#calculate change in np when v_rm is removed
repression_vector <- node_repression(g = g, v_rm = v_rm, state_function = calc_np_all,
exp = exp, neighbors_only = TRUE)
#clean up and bind
df_i <- bind_repression(df = df, cell_lines = cell_lines, i = i, v_rm = v_rm)
#clean up and bind
df_i <- bind_repression(df = df, cell_lines = cell_lines, i = i,
v_rm = v_rm, repression_vector = repression_vector)
#clean up and bind
df_i <- bind_repression(df = df, cell_lines = cell_lines, i = i,
v_rm = v_rm, repression_vector = repression_vector)
View(df_i)
paste0(cache, "/", v_rm "_gdsc_np.Rda")
paste0(cache, "/", v_rm, "_gdsc_np.Rda")
document()
document()
document()
document()
install()
library(disruptr)
?GDSC_repress
test <- GDSC_repress(cache = "G:/My Drive/data/gdsc", v_rm = "EGFR", ncores = 6)
use_rcpp()
use_r("disruptr-package")
object.size(df)
document()
load(file = paste0(cache, "/", v_rm, "_gdsc_np.Rda"))
load(file = paste0(cache, "/", v_rm, "_gdsc_np.Rda"))
View(df_np)
df <- df_np
rm(df_np)
rm(g)
library(magrittr)
df <- df %>%
dplyr::filter(!is.na(np)) %>%
dplyr::group_by(cell_line) %>%
dplyr::summarise(total_np = sum(.data$np),
diff_np = sum(.data$np_diff),
egfr_exp = sum(ifelse(
gene_symbols == 'EGFR',
.data$log_expression,
0)),
egfr_np = sum(ifelse(
gene_symbols == 'EGFR',
.data$np,
0))) %>%
dplyr::mutate(diff_np_scaled = .data$diff_np/.data$total_np)
View(df)
load(paste0(cache, "/", v_rm, "_gdsc_np.Rda"))
View(df_np)
sum(df_np$np)
df_test <- df_np %>% filter(!is.na(np))
df_test <- df_np %>% dplyr::filter(!is.na(np))
View(df_test)
sum(df_np$np)
sum(df_test$np)
range(np)
sum(df_test$np == Inf)
df <- df_np
df <- df %>%
dplyr::filter(!is.na(np),
!is.infinite(np)) %>%
dplyr::group_by(cell_line) %>%
dplyr::summarise(total_np = sum(.data$np),
diff_np = sum(.data$np_diff),
egfr_exp = sum(ifelse(
gene_symbols == 'EGFR',
.data$log_expression,
0)),
egfr_np = sum(ifelse(
gene_symbols == 'EGFR',
.data$np,
0))) %>%
dplyr::mutate(diff_np_scaled = .data$diff_np/.data$total_np)
install()
document()
install()
use_r("network_filter")
library(devtools)
use_r("network_filter")
#download the data
url1<- "https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx"
httr::GET(url1, httr::write_disk(tf <- tempfile(fileext = ".xlsx")))
cache = "G:/My Drive/data/gdsc"
#download the data
url1<- "https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS4A.xlsx"
httr::GET(url1, httr::write_disk(tf <- tempfile(fileext = ".xlsx")))
#read into R
df <- readxl::read_excel(tf, skip = 5)
View(df)
#download the data
url1<- "https://www.cancerrxgene.org/gdsc1000/GDSC1000_WebResources//Data/suppData/TableS2C.xlsx"
httr::GET(url1, httr::write_disk(tf <- tempfile(fileext = ".xlsx")))
#read into R
df <- readxl::read_excel(tf)
View(df)
#read into R
df <- readxl::read_excel(tf, skip = 18)
document()
library(devtools)
document()
load_all()
df_list <- get_gdsc(cache = cache)
warnings()
View(df_list)
#grab and clean dna variants data
dna_df <- df_list[[4]]
df <- df %>%
janitor::clean_names() %>%
dplyr::rename(cell_line = cosmic_id)
load_all()
test <- clean_gdsc
test <- test()
test <- clean_gdsc(cache = "G:/My Drive/data/gdsc")
install()
install()
use_build_ignore(files = "src")
use_build_ignore(files = "code.cpp")
install()
install()
install()
install()
?readxl::read_excel
?try
install()
load_all
load_all()
df <- get_dna()
warnings()
?suppressWarnings
devtools::load_all()
df <- get_dna()
install()
